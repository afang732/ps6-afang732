all_numbers
## Which numbers (out of all_numbers) are larger than 70?
## Use logical operations to create a logical
## vector (TRUES/FALSES) that tell which number is larger
largerthan70 <- all_numbers>70
largerthan70 <- c(71,72,73,74,75,76,77,78,79)
largerthan70
## Out of your all numbers, extract only those that are
## smaller than 70
all_numbers <- c(lower_numbers,numbers)
filter <- c(TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE)
all_numbers[filter]
## Compute squares of all those numbers that are smaller
## than 70 in your vector
(lower_numbers^2)
## Compute modulo by 2 of all your numbers.
## Hint: check out the modulo operator '%%'
(all_numbers%%2)
## Print even numbers only in your vector.
## Do _not_ create the subvector manually, use modulo operator and logical
## indexing to extract the even numbers!
even_numbers<- (all_numbers%%2)
even_filter <- c(TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE)
even <- all_numbers[even_filter]
even
### ------------------ Challenge ------------------
## Write a function `remove_digits` that will remove all digits
## (i.e. characters '0' through '9')
## from all elements in a
## *vector of strings*.
## For instance, "a2b" -> "ab"
digits <- 0:9
remove_digits <- function(x) {
return(gsub('[[:digit:]]+', '',x))
}
highways <- c("north405","90east","405south","520west")
highway_no_digit <- remove_digits(highways)
highway_no_digit
## Demonstrate that your approach is successful by passing a
## vector of courses to your function
## For example,
## RemoveDigits(c("INFO 201", "CSE 142", "mps-803c", "K2-team '21"))
## should return
## c("INFO"    "CSE "     "mps-c"    "K-team '")
courses <- c("INFO 200","PSYCH 355","INFO 201")
courses_no_digits <- remove_digits(courses)
courses_no_digits
## Write an if/else statement that checks to see if your vector has any digits.
## If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
## Hint: check out the functions 'any' and 'all’
vec1 <- c("BrooklynAve","RooseveltWay","FremontAve")
vec2 <- c("NE45","NE50")
any_digits <- function(digits)
if (any(vec1 == digits)) {
print("Yay!")
} else if (any(vec2 == digits)) {
print("Oh no!")
} else {
print("Oh no!")
}
checks <- any_digits(vec2)
checks1 <- any_digits(vec1)
for(element in names(grades)){
cat(element, ":", max(grades[[element]])), "\n"
for(element in names(grades)){
cat(element, ":", max(grades[[element]])) "\n"
col <- max(japanese)
### ========== a3-data ==========
## Before you get started, make sure to set you are in the right working directory.
## Print your working directory (in R, not in shell!) here.
/Users/annafang/desktop/info201/ps3-data-afang732
### ========== a3-data ==========
## Before you get started, make sure to set you are in the right working directory.
## Print your working directory (in R, not in shell!) here.
/Users/annafang/desktop/info201/ps3-data-afang732
grades
grades <- data.frame(
names = c("Anna", "Clarice", "Izzy", "Jeremy", "Howard"),
math = c(sample(100,5,replace=TRUE)),
japanese = c(80,75,90,93,60),
dance = c(90,98,92,80,74),
gpa = c(math+japanese+dance)/3)
### ========== a3-data ==========
## Before you get started, make sure to set you are in the right working directory.
## Print your working directory (in R, not in shell!) here.
/Users/annafang/desktop/info201/ps3-data-afang732
### This lab will prepare you for PS4!
### This is a _graded lab_, you'll get 3
### points if you solve and submit it correctly
### Squrrel census data is downloaded from NY Open Data Portal
### See the readme
### https://bitbucket.org/otoomet/data/src/master/nature/
### for more information and better layout of the
### variable names
###
### Variables:
###
### **X**: Longitude coordinate for squirrel sighting point
### **Y**: Latitude coordinate for squirrel sighting point
### **Unique Squirrel ID**: Identification tag for each squirrel
### sightings. The tag is comprised of "Hectare ID" + "Shift" + "Date" +
### "Hectare Squirrel Number."
### **Hectare**: ID tag, which is derived from the hectare grid used to
### divide and count the park area. One axis that runs predominantly
### north-to-south is numerical (1-42), and the axis that runs
### predominantly east-to-west is roman characters (A-I).
### **Shift**: Value is either "AM" or "PM," to communicate whether or
### not the sighting session occurred in the morning or late afternoon.
### **Date**: Concatenation of the sighting session day and month.
### **Hectare Squirrel Number**: Number within the chronological
### sequence of squirrel sightings for a discrete sighting session.
### **Age**: Value is either "Adult" or "Juvenile."
### **Primary Fur Color**: Value is either "Gray," "Cinnamon" or
### "Black."
### **Highlight Fur Color**: Discrete value or string values comprised
### of "Gray," "Cinnamon" or "Black."
### **Combination of Primary and Highlight Color**: A combination of the
### previous two columns; this column gives the total permutations of
### primary and highlight colors observed.
### **Color notes**: Sighters occasionally added commentary on the
### squirrel fur conditions. These notes are provided here.
### **Location**: Value is either "Ground Plane" or "Above Ground."
### Sighters were instructed to indicate the location of where the
### squirrel was when first sighted.
### **Above Ground Sighter Measurement**: For squirrel sightings on the
### ground plane, fields were populated with a value of “FALSE.”
### **Specific Location**: Sighters occasionally added commentary on the
### squirrel location. These notes are provided here.
### **Running**: Squirrel was seen running.
### **Chasing**: Squirrel was seen chasing another squirrel.
### **Climbing**: Squirrel was seen climbing a tree or other
### environmental landmark.
### **Eating**: Squirrel was seen eating.
### **Foraging**: Squirrel was seen foraging for food.
### **Other Activities**:
### **Kuks**: Squirrel was heard kukking, a chirpy vocal communication
### used for a variety of reasons.
### **Quaas**: Squirrel was heard quaaing, an elongated vocal
### communication which can indicate the presence of a ground predator
### such as a dog.
### **Moans**: Squirrel was heard moaning, a high-pitched vocal
### communication which can indicate the presence of an air predator
### such as a hawk.
### **Tail flags**: Squirrel was seen flagging its tail. Flagging is a
### whipping motion used to exaggerate squirrel's size and confuse
### rivals or predators. Looks as if the squirrel is scribbling with
### tail into the air.
### **Tail twitches**: Squirrel was seen twitching its tail. Looks like
### a wave running through the tail, like a breakdancer doing the arm
### wave. Often used to communicate interest, curiosity.
### **Approaches**: Squirrel was seen approaching human, seeking food.
### **Indifferent**: Squirrel was indifferent to human presence.
### **Runs from**: Squirrel was seen running from humans, seeing them as
### a threat.
### **Other Interactions**: Sighter notes on other types of interactions
### between squirrels and humans.
### **Lat/Long**: Latitude and longitude
### ---------- Overview ----------
## Load tidyverse (or dplyr) library
library(tidyverse)
library(dplyr)
library(readr)
library(stringr)
setwd(Users/annafang/desktop/info201/gradedlabs/glab2-dplyr-afang732)
## How many squirrels were Approaching humans?
approach <- squirrel_data$Approaches
squirrel_data %>% filter(!grepl('TRUE', Approaches))
### ---------- Describe data ----------
## How many different unique squirrels are there?
unique <- squirrel_data$Unique.Squirrel.ID
library(tidyverse)
library(dplyr)
library(readr)
library(stringr)
squirrel_data <- read.csv('squirrel_data.csv.bz2')
squirrel_data <- read.csv('squirrel_data.csv.bz2')
setwd(Users/annafang/desktop/info201/gradedlabs/glab2-dplyr-afang732)
squirrel_data <- read.csv('squirrel_data.csv.bz2')
library(rsconnect)
setwd('/Users/annafang/desktop/info201/ps6-afang732')
spotify <- read.csv("spotify_top_charts_22.csv")
server <- function(input, output) {
spotify <- read.csv("spotify_top_charts_22.csv")
spotify_data <- reactive({
spotify %>%
filter(artist_names %in% as.character(input$artist_names), weeks_on_chart >= 20, na.rm = TRUE) %>%
select(artist_names, duration_ms, weeks_on_chart)
})
output$barchart <- renderPlotly({
data_subset <- spotify_data()
barchart <- ggplot(data_subset, aes(x = artist_names, y = weeks_on_chart, fill = artist_names)) +
geom_col() +
theme(axis.text.x = element_text(angle = 45)) +
xlab("Artist Names") +
ylab("Weeks on Chart") +
labs(fill="Artists")
ggplotly(barchart)
})
observeEvent(input$artist_names, {
spotify_data()
})
filtered_data <- reactive({
spotify %>%
filter(weeks_on_chart >= input$weeks_on_chart) %>%
select(artist_names)
})
output$artist_names <- renderText({
paste(filtered_data()$artist_names, collapse = ", ")
})
}
source("server.R")
# Run the shiny app
shinyApp(ui, server)
setwd('~desktop/info201/ps6-afang732')
setwd('~/info201/ps6-afang732')
setwd('/Users/annafang/desktop/info201/ps6-afang732')
setwd('/Users/annafang/desktop/info201/ps6-afang732')
setwd('/Users/annafang/desktop/info201/ps6-afang732')
runApp()
runApp()
library(htmltools)
library(shiny)
library(ggplot2)
library(htmltools)
library(rsconnect)
spotify <- read.csv("spotify_top_charts_22.csv")
# Define UI for application
ui <- fluidPage(
navbarPage("Spotify Top Chart Songs 2022",
# Opening page
tabPanel("Overview",
fluidPage(
br(),
h4("General Information"),
p("This dataset includes the top 200 Spotify songs of 2022, ranked by popularity on the platform. The dataset includes information on the song's name, artist, and streaming metrics such as ", em("danceability"), ", ", em("energy"), ",", em("key"), " and more."),
br(),
h4("Variables"),
p(em(strong("The dataset includes the following variables:"))),
p(
em("Track Name:"), " the name of the song",
em("Artist:"), " the artist(s) of the song",
em("Week on Charts:"), " Number of weeks the song was on top charts",
em("URL:"), " the URL of the song on Spotify",
em("Danceability:"), " Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo.",
em("Key:"), " The key the track is in. Integers map to pitches using standard Pitch Class Notation."
)
)
),
# Visualizations tab
tabPanel("Bar Chart",
sidebarLayout(
sidebarPanel(
selectInput("artist_names", "Select Artist Names:",
choices = c("All", unique(spotify$artist_names)),
multiple = TRUE,
selected = c("Justin Bieber", "Doja Cat", "Adele"))
),
mainPanel(
plotlyOutput(outputId = "barchart"),
verbatimTextOutput(outputId = "summary")
)
)
),
# Table tab
tabPanel("chart",
titlePanel("Spotify Top Chart Songs 2022: Artists and their Weeks on Charts"),
sidebarLayout(
sidebarPanel(
sliderInput("weeks_on_chart", "Select Weeks on Chart:", min = 1, max = 100, value = 10)
),
mainPanel(
textOutput("artist_names")
)
)
)
)
)
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
library(DT)
server <- function(input, output) {
spotify <- read.csv("spotify_top_charts_22.csv")
spotify_data <- reactive({
spotify %>%
filter(artist_names %in% as.character(input$artist_names), weeks_on_chart >= 20, na.rm = TRUE) %>%
select(artist_names, duration_ms, weeks_on_chart)
})
output$barchart <- renderPlotly({
data_subset <- spotify_data()
barchart <- ggplot(data_subset, aes(x = artist_names, y = weeks_on_chart, fill = artist_names)) +
geom_col() +
theme(axis.text.x = element_text(angle = 45)) +
xlab("Artist Names") +
ylab("Weeks on Chart") +
labs(fill="Artists")
ggplotly(barchart)
})
observeEvent(input$artist_names, {
spotify_data()
})
filtered_data <- reactive({
spotify %>%
filter(weeks_on_chart >= input$weeks_on_chart) %>%
select(artist_names)
})
output$artist_names <- renderText({
paste(filtered_data()$artist_names, collapse = ", ")
})
}
# Load necessary packages
library(shiny)
spotify <- read.csv("spotify_top_charts_22.csv")
source("ui.R")
source("server.R")
# Run the shiny app
shinyApp(ui, server)
library(rsconnect)
library(plotly)
library(htmltools)
library(shiny)
library(ggplot2)
library(htmltools)
library(rsconnect)
library(plotly)
spotify <- read.csv("spotify_top_charts_22.csv")
# Define UI for application
ui <- fluidPage(
navbarPage("Spotify Top Chart Songs 2022",
# Opening page
tabPanel("Overview",
fluidPage(
br(),
h4("General Information"),
p("This dataset includes the top 200 Spotify songs of 2022, ranked by popularity on the platform. The dataset includes information on the song's name, artist, and streaming metrics such as ", em("danceability"), ", ", em("energy"), ",", em("key"), " and more."),
br(),
h4("Variables"),
p(em(strong("The dataset includes the following variables:"))),
p(
em("Track Name:"), " the name of the song",
em("Artist:"), " the artist(s) of the song",
em("Week on Charts:"), " Number of weeks the song was on top charts",
em("URL:"), " the URL of the song on Spotify",
em("Danceability:"), " Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo.",
em("Key:"), " The key the track is in. Integers map to pitches using standard Pitch Class Notation."
)
)
),
# Visualizations tab
tabPanel("Bar Chart",
sidebarLayout(
sidebarPanel(
selectInput("artist_names", "Select Artist Names:",
choices = c("All", unique(spotify$artist_names)),
multiple = TRUE,
selected = c("Justin Bieber", "Doja Cat", "Adele"))
),
mainPanel(
plotlyOutput(outputId = "barchart"),
verbatimTextOutput(outputId = "summary")
)
)
),
# Table tab
tabPanel("chart",
titlePanel("Spotify Top Chart Songs 2022: Artists and their Weeks on Charts"),
sidebarLayout(
sidebarPanel(
sliderInput("weeks_on_chart", "Select Weeks on Chart:", min = 1, max = 100, value = 10)
),
mainPanel(
textOutput("artist_names")
)
)
)
)
)
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
library(DT)
server <- function(input, output) {
spotify <- read.csv("spotify_top_charts_22.csv")
spotify_data <- reactive({
spotify %>%
filter(artist_names %in% as.character(input$artist_names), weeks_on_chart >= 20, na.rm = TRUE) %>%
select(artist_names, duration_ms, weeks_on_chart)
})
output$barchart <- renderPlotly({
data_subset <- spotify_data()
barchart <- ggplot(data_subset, aes(x = artist_names, y = weeks_on_chart, fill = artist_names)) +
geom_col() +
theme(axis.text.x = element_text(angle = 45)) +
xlab("Artist Names") +
ylab("Weeks on Chart") +
labs(fill="Artists")
ggplotly(barchart)
})
observeEvent(input$artist_names, {
spotify_data()
})
filtered_data <- reactive({
spotify %>%
filter(weeks_on_chart >= input$weeks_on_chart) %>%
select(artist_names)
})
output$artist_names <- renderText({
paste(filtered_data()$artist_names, collapse = ", ")
})
}
# Load necessary packages
library(shiny)
spotify <- read.csv("spotify_top_charts_22.csv")
source("ui.R")
source("server.R")
# Run the shiny app
shinyApp(ui, server)
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
library(DT)
server <- function(input, output) {
spotify <- read.csv("spotify_top_charts_22.csv")
spotify_data <- reactive({
spotify %>%
filter(artist_names %in% as.character(input$artist_names), weeks_on_chart >= 20, na.rm = TRUE) %>%
select(artist_names, duration_ms, weeks_on_chart)
})
output$barchart <- renderPlotly({
data_subset <- spotify_data()
barchart <- ggplot(data_subset, aes(x = artist_names, y = weeks_on_chart, fill = artist_names)) +
geom_col() +
theme(axis.text.x = element_text(angle = 45)) +
xlab("Artist Names") +
ylab("Weeks on Chart") +
labs(fill="Artists")
ggplotly(barchart)
})
observeEvent(input$artist_names, {
spotify_data()
})
filtered_data <- reactive({
spotify %>%
filter(weeks_on_chart >= input$weeks_on_chart) %>%
select(artist_names)
})
output$artist_names <- renderText({
paste(filtered_data()$artist_names, collapse = ", ")
})
}
library(htmltools)
library(shiny)
library(ggplot2)
library(htmltools)
library(rsconnect)
library(plotly)
spotify <- read.csv("spotify_top_charts_22.csv")
# Define UI for application
ui <- fluidPage(
navbarPage("Spotify Top Chart Songs 2022",
# Opening page
tabPanel("Overview",
fluidPage(
br(),
h4("General Information"),
p("This dataset includes the top 200 Spotify songs of 2022, ranked by popularity on the platform. The dataset includes information on the song's name, artist, and streaming metrics such as ", em("danceability"), ", ", em("energy"), ",", em("key"), " and more."),
br(),
h4("Variables"),
p(em(strong("The dataset includes the following variables:"))),
p(
em("Track Name:"), " the name of the song",
em("Artist:"), " the artist(s) of the song",
em("Week on Charts:"), " Number of weeks the song was on top charts",
em("URL:"), " the URL of the song on Spotify",
em("Danceability:"), " Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo.",
em("Key:"), " The key the track is in. Integers map to pitches using standard Pitch Class Notation."
)
)
),
# Visualizations tab
tabPanel("Bar Chart",
sidebarLayout(
sidebarPanel(
selectInput("artist_names", "Select Artist Names:",
choices = c("All", unique(spotify$artist_names)),
multiple = TRUE,
selected = c("Justin Bieber", "Doja Cat", "Adele"))
),
mainPanel(
plotlyOutput(outputId = "barchart"),
verbatimTextOutput(outputId = "summary")
)
)
),
# Table tab
tabPanel("chart",
titlePanel("Spotify Top Chart Songs 2022: Artists and their Weeks on Charts"),
sidebarLayout(
sidebarPanel(
sliderInput("weeks_on_chart", "Select Weeks on Chart:", min = 1, max = 100, value = 10)
),
mainPanel(
textOutput("artist_names")
)
)
)
)
)
