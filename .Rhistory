output$table <- DT::renderDataTable({
DT::datatable(filtered_data(),
options = list(pageLength = 10, scrollX = TRUE),
rownames = FALSE)
})
}
# Load necessary packages
library(shiny)
# Load ui and server functions
source("ui.R")
source("server.R")
library(htmltools)
library(shiny)
library(ggplot2)
setwd('/Users/annafang/desktop/info201/ps6-afang732')
spotify <- read.csv("spotify_top_charts_22.csv")
# Define UI for application
ui <- shinyUI(
navbarPage("Spotify Top Chart Songs 2022",
# Opening page
tabPanel("Overview",
fluidPage(
br(),
h4("General Information"),
p("This dataset includes the top 200 Spotify songs of 2022, ranked by popularity on the platform. The dataset includes information on the song's name, artist, and streaming metrics such as streams, danceability, energy, and more."),
br(),
h4("Variables"),
p("The dataset includes the following variables:"),
p(p("Track Name: the name of the song"),
p("Artist: the artist(s) of the song"),
p("Week on Charts: Number of weeks the song was on top charts"),
p("URL: the URL of the song on Spotify"),
p("Danceability: Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo."),
p("Key: The key the track is in. Integers map to pitches using standard Pitch Class Notation."))
)
),
# Visualizations tab
tabPanel("Visualizations",
sidebarLayout(
sidebarPanel(
selectInput("artist_names", "Select Artist Names:",
choices = c("All", unique(spotify$artist_names)),
multiple = TRUE,
selected = c("Justin Bieber", "Doja Cat", "Adele"))
),
mainPanel(
plotlyOutput(outputId = "barchart"),
verbatimTextOutput(outputId = "summary")
)
)
),
# Table tab
tabPanel("Table",
sidebarLayout(
sidebarPanel(
textInput("search_term", "Search by track name"),
selectInput("artist", "Filter by artist",
choices = c("All artists", unique(spotify$artist_names)))
),
mainPanel(
DT::dataTableOutput("table")                        )
)
)
)
)
# Run the shiny app
shinyApp(ui = ui, server = server)
source("server.R")
# Load ui and server functions
source("ui.R")
datatable(filtered_data(),
options = list(pageLength = 10, scrollX = TRUE),
rownames = FALSE)
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
library(DT)
# Define server
server <- (function(input, output) {
spotify <- read.csv("spotify_top_charts_22.csv")
spotify_data <- reactive({
spotify %>%
filter(artist_names %in% as.character(input$artist_names), weeks_on_chart >= 20, na.rm = TRUE) %>%
select(artist_names, duration_ms, weeks_on_chart)
})
output$barchart <- renderPlotly({
data_subset <- spotify_data()
bar <- ggplot(data_subset, aes(x = artist_names, y = weeks_on_chart, fill = artist_names)) +
geom_col() +
theme(axis.text.x = element_text(angle = 45)) +
xlab("Artist Names") +
ylab("Weeks on Chart") +
labs(fill="Artists")
ggplotly(bar)
})
observeEvent(input$artist_names, {
spotify_data()
})
})
# Create table
server <- function(input, output) {
# Define a reactive expression to filter the data based on the search term and artist
filtered_data <- reactive({
search_term <- input$search_term
artist <- input$artist
spotify_filtered <- spotify
if (!is.null(search_term) && search_term != "") {
spotify_filtered <- spotify_filtered %>%
filter(str_detect(track_name, search_term, ignore_case = TRUE))
}
if (artist != "All artists") {
spotify_filtered <- spotify_filtered %>%
filter(artist_names == artist)
}
return(spotify_filtered)
})
# Render visual table output
output$table <- DT::renderDT({
datatable(filtered_data(),
options = list(pageLength = 10, scrollX = TRUE),
rownames = FALSE)
})
source("server.R")
# Run the shiny app
shinyApp(ui = ui, server = server)
source("server.R")
# Run the shiny app
shinyApp(ui = ui, server = server)
# Create table
server <- function(input, output) {
# Define a reactive expression to filter the data based on the search term and artist
filtered_data <- reactive({
search_term <- input$search_term
artist <- input$artist
spotify_filtered <- spotify
if (!is.null(search_term) && search_term != "") {
spotify_filtered <- spotify_filtered %>%
filter(str_detect(track_name, search_term, ignore_case = TRUE))
}
if (artist != "All artists") {
spotify_filtered <- spotify_filtered %>%
filter(artist_names == artist)
}
return(spotify_filtered)
})
# Render visual table output
output$table <- DT::renderDT({
datatable(filtered_data(),
options = list(pageLength = 10, scrollX = TRUE),
rownames = FALSE)
})
}
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
library(DT)
# Define server
server <- (function(input, output) {
spotify <- read.csv("spotify_top_charts_22.csv")
spotify_data <- reactive({
spotify %>%
filter(artist_names %in% as.character(input$artist_names), weeks_on_chart >= 20, na.rm = TRUE) %>%
select(artist_names, duration_ms, weeks_on_chart)
})
output$barchart <- renderPlotly({
data_subset <- spotify_data()
bar <- ggplot(data_subset, aes(x = artist_names, y = weeks_on_chart, fill = artist_names)) +
geom_col() +
theme(axis.text.x = element_text(angle = 45)) +
xlab("Artist Names") +
ylab("Weeks on Chart") +
labs(fill="Artists")
ggplotly(bar)
})
observeEvent(input$artist_names, {
spotify_data()
})
})
# Create table
server <- function(input, output) {
# Define a reactive expression to filter the data based on the search term and artist
filtered_data <- reactive({
search_term <- input$search_term
artist <- input$artist
spotify_filtered <- spotify
if (!is.null(search_term) && search_term != "") {
spotify_filtered <- spotify_filtered %>%
filter(str_detect(track_name, search_term, ignore_case = TRUE))
}
if (artist != "All artists") {
spotify_filtered <- spotify_filtered %>%
filter(artist_names == artist)
}
return(spotify_filtered)
})
# Render visual table output
output$table <- DT::renderDT({
datatable(filtered_data(),
options = list(pageLength = 10, scrollX = TRUE),
rownames = FALSE)
})
}
# Create table
server <- function(input, output) {
# Define a reactive expression to filter the data based on the search term and artist
filtered_data <- reactive({
search_term <- input$search_term
artist <- input$artist
spotify_filtered <- spotify
if (!is.null(search_term) && search_term != "") {
spotify_filtered <- spotify_filtered %>%
filter(str_detect(track_name, search_term, ignore_case = TRUE))
}
if (artist != "All artists") {
spotify_filtered <- spotify_filtered %>%
filter(artist_names == artist)
}
return(spotify_filtered)
})
# Render visual table output
output$table <- DT::renderDT({
datatable(filtered_data(),
options = list(pageLength = 10, scrollX = TRUE),
rownames = FALSE)
})
}
server
source("server.R")
# Define a reactive expression to filter the data based on the search term and artist
filtered_data <- reactive({
spotify_data_filtered <- spotify_data
if (!is.null(input$search_term) && input$search_term != "") {
spotify_data_filtered <- spotify_data_filtered %>%
filter(str_detect(track_name, input$search_term, ignore_case = TRUE))
}
if (input$artist_names != "All artists") {
spotify_data_filtered <- spotify_data_filtered %>%
filter(artist_names == input$artist_names)
}
return(spotify_data_filtered)
})
# Define the output object for the interactive table
output$table <- DT::renderDT({
datatable(filtered_data(),
options = list(pageLength = 10, scrollX = TRUE),
rownames = FALSE)
})
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
library(DT)
# Define server
server <- (function(input, output) {
spotify <- read.csv("spotify_top_charts_22.csv")
spotify_data <- reactive({
spotify %>%
filter(artist_names %in% as.character(input$artist_names), weeks_on_chart >= 20, na.rm = TRUE) %>%
select(artist_names, duration_ms, weeks_on_chart)
})
output$barchart <- renderPlotly({
data_subset <- spotify_data()
bar <- ggplot(data_subset, aes(x = artist_names, y = weeks_on_chart, fill = artist_names)) +
geom_col() +
theme(axis.text.x = element_text(angle = 45)) +
xlab("Artist Names") +
ylab("Weeks on Chart") +
labs(fill="Artists")
ggplotly(bar)
})
observeEvent(input$artist_names, {
spotify_data()
})
})
# Create table
server <- function(input, output) {
filtered_data <- reactive({
spotify_data_filtered <- spotify
if (!is.null(input$search_term) && input$search_term != "") {
spotify_data_filtered <- spotify_data_filtered %>%
filter(str_detect(track_name, input$search_term, ignore_case = TRUE))
}
if (input$artist_names != "All artists") {
spotify_data_filtered <- spotify_data_filtered %>%
filter(artist_names == input$artist_names)
}
return(spotify_data_filtered)
})
# Define the output object for the interactive table
output$table <- DT::renderDT({
datatable(filtered_data(),
options = list(pageLength = 10, scrollX = TRUE),
rownames = FALSE)
})
}
source("server.R")
library(DT)
# Define the output object for the interactive table
output$table <- DT::renderDT({
datatable(filtered_data(),
options = list(pageLength = 10, scrollX = TRUE),
rownames = FALSE)
})
# Run the shiny app
shinyApp(ui = ui, server = server)
# Define UI for application
ui <- shinyUI(
navbarPage("Spotify Top Chart Songs 2022",
# Opening page
tabPanel("Overview",
fluidPage(
br(),
h4("General Information"),
p("This dataset includes the top 200 Spotify songs of 2022, ranked by popularity on the platform. The dataset includes information on the song's name, artist, and streaming metrics such as streams, danceability, energy, and more."),
br(),
h4("Variables"),
p("The dataset includes the following variables:"),
p(p("Track Name: the name of the song"),
p("Artist: the artist(s) of the song"),
p("Week on Charts: Number of weeks the song was on top charts"),
p("URL: the URL of the song on Spotify"),
p("Danceability: Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo."),
p("Key: The key the track is in. Integers map to pitches using standard Pitch Class Notation."))
)
),
# Visualizations tab
tabPanel("Chart",
sidebarLayout(
sidebarPanel(
selectInput("artist_names", "Select Artist Names:",
choices = c("All", unique(spotify$artist_names)),
multiple = TRUE,
selected = c("Justin Bieber", "Doja Cat", "Adele"))
),
mainPanel(
plotlyOutput(outputId = "barchart"),
verbatimTextOutput(outputId = "summary")
)
)
),
# Table tab
tabPanel("Table",
sidebarLayout(
sidebarPanel(
textInput("search_term", "Search by track name"),
selectInput("artist", "Filter by artist",
choices = c("All artists", unique(spotify$artist_names)))
),
mainPanel(
DT::dataTableOutput("table")                        )
)
)
)
)
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
library(DT)
server <- (function(input, output) {
spotify <- read.csv("spotify_top_charts_22.csv")
spotify_data <- reactive({
spotify %>%
filter(artist_names %in% as.character(input$artist_names), weeks_on_chart >= 20, na.rm = TRUE) %>%
select(artist_names, duration_ms, weeks_on_chart)
})
output$barchart <- renderPlotly({
data_subset <- spotify_data()
bar <- ggplot(data_subset, aes(x = artist_names, y = weeks_on_chart, fill = artist_names)) +
geom_col() +
theme(axis.text.x = element_text(angle = 45)) +
xlab("Artist Names") +
ylab("Weeks on Chart") +
labs(fill="Artists")
ggplotly(bar)
})
observeEvent(input$artist_names, {
spotify_data()
})
})
# Create table
server <- function(input, output) {
spotify <- read.csv("spotify_top_charts_22.csv")
filtered_data <- reactive({
spotify_data_filtered <- spotify
if (!is.null(input$search_term) && input$search_term != "") {
spotify_data_filtered <- spotify_data_filtered %>%
filter(str_detect(track_name, input$search_term, ignore_case = TRUE))
}
if (input$artist_names != "All artists") {
spotify_data_filtered <- spotify_data_filtered %>%
filter(artist_names == input$artist_names)
}
return(spotify_data_filtered)
})
# Define the output object for the interactive table
output$table <- DT::renderDT({
datatable(filtered_data(),
options = list(pageLength = 10, scrollX = TRUE),
rownames = FALSE)
})
}
# Load necessary packages
library(shiny)
# Load ui and server functions
source("ui.R")
source("server.R")
source("server.R")
# Define the output object for the interactive table
output$table <- DT::renderDT({
datatable(filtered_data(),
options = list(pageLength = 10, scrollX = TRUE),
rownames = FALSE)
})
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
library(DT)
server <- (function(input, output) {
spotify <- read.csv("spotify_top_charts_22.csv")
spotify_data <- reactive({
spotify %>%
filter(artist_names %in% as.character(input$artist_names), weeks_on_chart >= 20, na.rm = TRUE) %>%
select(artist_names, duration_ms, weeks_on_chart)
})
output$barchart <- renderPlotly({
data_subset <- spotify_data()
bar <- ggplot(data_subset, aes(x = artist_names, y = weeks_on_chart, fill = artist_names)) +
geom_col() +
theme(axis.text.x = element_text(angle = 45)) +
xlab("Artist Names") +
ylab("Weeks on Chart") +
labs(fill="Artists")
ggplotly(bar)
})
observeEvent(input$artist_names, {
spotify_data()
})
})
# Create table
server <- function(input, output) {
spotify <- read.csv("spotify_top_charts_22.csv")
filtered_data <- reactive({
spotify_data_filtered <- spotify
if (!is.null(input$search_term) && input$search_term != "") {
spotify_data_filtered <- spotify_data_filtered %>%
filter(str_detect(track_name, input$search_term, ignore_case = TRUE))
}
if (input$artist_names != "All artists") {
spotify_data_filtered <- spotify_data_filtered %>%
filter(artist_names == input$artist_names)
}
return(spotify_data_filtered)
})
output$table <- DT::renderDT({
datatable(filtered_data(),
options = list(pageLength = 10, scrollX = TRUE),
rownames = FALSE)
})
}
runApp()
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
library(DT)
server <- (function(input, output) {
spotify <- read.csv("spotify_top_charts_22.csv")
spotify_data <- reactive({
spotify %>%
filter(artist_names %in% as.character(input$artist_names), weeks_on_chart >= 20, na.rm = TRUE) %>%
select(artist_names, duration_ms, weeks_on_chart)
})
output$barchart <- renderPlotly({
data_subset <- spotify_data()
bar <- ggplot(data_subset, aes(x = artist_names, y = weeks_on_chart, fill = artist_names)) +
geom_col() +
theme(axis.text.x = element_text(angle = 45)) +
xlab("Artist Names") +
ylab("Weeks on Chart") +
labs(fill="Artists")
ggplotly(bar)
})
observeEvent(input$artist_names, {
spotify_data()
})
})
# Create table
server <- function(input, output) {
spotify <- read.csv("spotify_top_charts_22.csv")
filtered_data <- reactive({
spotify_data_filtered <- spotify
if (!is.null(input$search_term) && input$search_term != "") {
spotify_data_filtered <- spotify_data_filtered %>%
filter(str_detect(track_name, input$search_term, ignore_case = TRUE))
}
if (input$artist_names != "All artists") {
spotify_data_filtered <- spotify_data_filtered %>%
filter(artist_names == input$artist_names)
}
return(spotify_data_filtered)
})
output$table <- DT::renderDT({
datatable(filtered_data(),
options = list(pageLength = 10, scrollX = TRUE),
rownames = FALSE)
})
}
runApp()
